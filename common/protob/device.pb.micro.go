// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/meeting/device.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DeviceService service

func NewDeviceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DeviceService service

type DeviceService interface {
	//查询设备列表
	GetDevices(ctx context.Context, in *ReqGetDevices, opts ...client.CallOption) (*Response, error)
	//查询设备详情
	GetDevice(ctx context.Context, in *ReqGetDevice, opts ...client.CallOption) (*Response, error)
	//新增设备
	CreateDevice(ctx context.Context, in *ReqCreateDevice, opts ...client.CallOption) (*Response, error)
	//编辑设备
	UpdateDevice(ctx context.Context, in *ReqUpdateDevice, opts ...client.CallOption) (*Response, error)
	//删除设备
	DeleteDevice(ctx context.Context, in *ReqDeleteDevice, opts ...client.CallOption) (*Response, error)
}

type deviceService struct {
	c    client.Client
	name string
}

func NewDeviceService(name string, c client.Client) DeviceService {
	return &deviceService{
		c:    c,
		name: name,
	}
}

func (c *deviceService) GetDevices(ctx context.Context, in *ReqGetDevices, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceService.GetDevices", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceService) GetDevice(ctx context.Context, in *ReqGetDevice, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceService.GetDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceService) CreateDevice(ctx context.Context, in *ReqCreateDevice, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceService.CreateDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceService) UpdateDevice(ctx context.Context, in *ReqUpdateDevice, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceService.UpdateDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceService) DeleteDevice(ctx context.Context, in *ReqDeleteDevice, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceService.DeleteDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceService service

type DeviceServiceHandler interface {
	//查询设备列表
	GetDevices(context.Context, *ReqGetDevices, *Response) error
	//查询设备详情
	GetDevice(context.Context, *ReqGetDevice, *Response) error
	//新增设备
	CreateDevice(context.Context, *ReqCreateDevice, *Response) error
	//编辑设备
	UpdateDevice(context.Context, *ReqUpdateDevice, *Response) error
	//删除设备
	DeleteDevice(context.Context, *ReqDeleteDevice, *Response) error
}

func RegisterDeviceServiceHandler(s server.Server, hdlr DeviceServiceHandler, opts ...server.HandlerOption) error {
	type deviceService interface {
		GetDevices(ctx context.Context, in *ReqGetDevices, out *Response) error
		GetDevice(ctx context.Context, in *ReqGetDevice, out *Response) error
		CreateDevice(ctx context.Context, in *ReqCreateDevice, out *Response) error
		UpdateDevice(ctx context.Context, in *ReqUpdateDevice, out *Response) error
		DeleteDevice(ctx context.Context, in *ReqDeleteDevice, out *Response) error
	}
	type DeviceService struct {
		deviceService
	}
	h := &deviceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DeviceService{h}, opts...))
}

type deviceServiceHandler struct {
	DeviceServiceHandler
}

func (h *deviceServiceHandler) GetDevices(ctx context.Context, in *ReqGetDevices, out *Response) error {
	return h.DeviceServiceHandler.GetDevices(ctx, in, out)
}

func (h *deviceServiceHandler) GetDevice(ctx context.Context, in *ReqGetDevice, out *Response) error {
	return h.DeviceServiceHandler.GetDevice(ctx, in, out)
}

func (h *deviceServiceHandler) CreateDevice(ctx context.Context, in *ReqCreateDevice, out *Response) error {
	return h.DeviceServiceHandler.CreateDevice(ctx, in, out)
}

func (h *deviceServiceHandler) UpdateDevice(ctx context.Context, in *ReqUpdateDevice, out *Response) error {
	return h.DeviceServiceHandler.UpdateDevice(ctx, in, out)
}

func (h *deviceServiceHandler) DeleteDevice(ctx context.Context, in *ReqDeleteDevice, out *Response) error {
	return h.DeviceServiceHandler.DeleteDevice(ctx, in, out)
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/meeting/room.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoomService service

func NewRoomServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoomService service

type RoomService interface {
	//查询会议室列表
	GetRooms(ctx context.Context, in *ReqGetRooms, opts ...client.CallOption) (*Response, error)
	//查询会议室详情
	GetRoom(ctx context.Context, in *ReqGetRoom, opts ...client.CallOption) (*Response, error)
	//新增会议室
	CreateRoom(ctx context.Context, in *ReqCreateRoom, opts ...client.CallOption) (*Response, error)
	//编辑会议室
	UpdateRoom(ctx context.Context, in *ReqUpdateRoom, opts ...client.CallOption) (*Response, error)
	//删除会议室
	DeleteRoom(ctx context.Context, in *ReqDeleteRoom, opts ...client.CallOption) (*Response, error)
}

type roomService struct {
	c    client.Client
	name string
}

func NewRoomService(name string, c client.Client) RoomService {
	return &roomService{
		c:    c,
		name: name,
	}
}

func (c *roomService) GetRooms(ctx context.Context, in *ReqGetRooms, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoomService.GetRooms", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) GetRoom(ctx context.Context, in *ReqGetRoom, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoomService.GetRoom", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) CreateRoom(ctx context.Context, in *ReqCreateRoom, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoomService.CreateRoom", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) UpdateRoom(ctx context.Context, in *ReqUpdateRoom, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoomService.UpdateRoom", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomService) DeleteRoom(ctx context.Context, in *ReqDeleteRoom, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "RoomService.DeleteRoom", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoomService service

type RoomServiceHandler interface {
	//查询会议室列表
	GetRooms(context.Context, *ReqGetRooms, *Response) error
	//查询会议室详情
	GetRoom(context.Context, *ReqGetRoom, *Response) error
	//新增会议室
	CreateRoom(context.Context, *ReqCreateRoom, *Response) error
	//编辑会议室
	UpdateRoom(context.Context, *ReqUpdateRoom, *Response) error
	//删除会议室
	DeleteRoom(context.Context, *ReqDeleteRoom, *Response) error
}

func RegisterRoomServiceHandler(s server.Server, hdlr RoomServiceHandler, opts ...server.HandlerOption) error {
	type roomService interface {
		GetRooms(ctx context.Context, in *ReqGetRooms, out *Response) error
		GetRoom(ctx context.Context, in *ReqGetRoom, out *Response) error
		CreateRoom(ctx context.Context, in *ReqCreateRoom, out *Response) error
		UpdateRoom(ctx context.Context, in *ReqUpdateRoom, out *Response) error
		DeleteRoom(ctx context.Context, in *ReqDeleteRoom, out *Response) error
	}
	type RoomService struct {
		roomService
	}
	h := &roomServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoomService{h}, opts...))
}

type roomServiceHandler struct {
	RoomServiceHandler
}

func (h *roomServiceHandler) GetRooms(ctx context.Context, in *ReqGetRooms, out *Response) error {
	return h.RoomServiceHandler.GetRooms(ctx, in, out)
}

func (h *roomServiceHandler) GetRoom(ctx context.Context, in *ReqGetRoom, out *Response) error {
	return h.RoomServiceHandler.GetRoom(ctx, in, out)
}

func (h *roomServiceHandler) CreateRoom(ctx context.Context, in *ReqCreateRoom, out *Response) error {
	return h.RoomServiceHandler.CreateRoom(ctx, in, out)
}

func (h *roomServiceHandler) UpdateRoom(ctx context.Context, in *ReqUpdateRoom, out *Response) error {
	return h.RoomServiceHandler.UpdateRoom(ctx, in, out)
}

func (h *roomServiceHandler) DeleteRoom(ctx context.Context, in *ReqDeleteRoom, out *Response) error {
	return h.RoomServiceHandler.DeleteRoom(ctx, in, out)
}
